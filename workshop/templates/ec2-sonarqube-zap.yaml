# [Contact an Author]
# * [Name: nho Luong]
# * [Skype](luongutnho_skype)
# * [Github](https://github.com/nholuongut/)
# * [Linkedin](https://www.linkedin.com/in/nholuong/)
# * [Email Address](luongutnho@hotmail.com)

AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template creates a EC2 instance and deploys open source 
  tools SonarQube and OWASP Zap. Please note, you will be billed 
  for the AWS resources used if you create a stack from this template.
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  SPDX-License-Identifier: MIT-0
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ami-amazon-linux-latest/amzn2023-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
      - /aws/service/ami-amazon-linux-latest/amzn2023-ami-hvm-x86_64-gp2
  DefaultVPCId:
    Description: Please select the Default VPC ID
    Type: AWS::EC2::VPC::Id

Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - Configure
        Install:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: |
                <!DOCTYPE html>
                <html>
                <body>
                  "Hello world!!!!!!!"
                </body>
                </html>
              mode: 000644
              owner: "root"
              group: "root"
            /etc/httpd/conf/httpd.conf:
              content: |
                      ServerRoot "/etc/httpd"
                      Listen 80
                      <VirtualHost *:80>
                        ProxyPass / http://localhost:8085/
                        ProxyPassReverse / http://localhost:8085/
                      </VirtualHost>
                      Listen 81
                      <VirtualHost *:81>
                        ProxyPass / http://localhost:9000/
                        ProxyPassReverse / http://localhost:9000/
                      </VirtualHost>
                      Include conf.modules.d/*.conf
                      IncludeOptional conf.d/*.conf
                      User apache
                      Group apache
                      <Directory />
                          AllowOverride none
                          Require all denied
                      </Directory>

                      DocumentRoot "/var/www/html"

                      <Directory "/var/www">
                          AllowOverride None
                          Require all granted
                      </Directory>

                      CustomLog "logs/access_log" combined
                      ErrorLog "logs/error_log"
                      LogLevel warn

                      <IfModule alias_module>
                          ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
                      </IfModule>

                      <Directory "/var/www/cgi-bin">
                          AllowOverride None
                          Options None
                      Require all granted
                      </Directory>

                      <IfModule mime_module>
                        TypesConfig /etc/mime.types
                        AddType application/x-compress .Z
                        AddType application/x-gzip .gz .tgz
                        AddType text/html .shtml
                        AddOutputFilter INCLUDES .shtml
                      </IfModule>
                      AddDefaultCharset UTF-8
                      <IfModule mod_http2.c>
                        Protocols h2 h2c http/1.1
                      </IfModule>

              mode: 000644
              owner: "apache"
              group: "apache"
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # The interval used to check for changes to the resource metadata in minutes. Default is 15
                interval=2
              mode: 000400
              owner: "root"
              group: "root"
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
              mode: 000400
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            start_sonar_qube:
              command: echo "test" > /home/ec2-user/ec2-echo.test
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData:
        "Fn::Base64":
          !Sub |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              # Get the latest CloudFormation package
              yum install -y aws-cfn-bootstrap
              yum install -y java-11-amazon-corretto
              yum install -y https://s3.us-east-2.amazonaws.com/amazon-ssm-us-east-2/latest/linux_amd64/amazon-ssm-agent.rpm
              yum install -y docker
              systemctl start amazon-ssm-agent
              systemctl status amazon-ssm-agent
              cd /home/ec2-user
              wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.7.1.42226.zip
              unzip sonarqube-8.7.1.42226.zip
              sed -i "s/#RUN_AS_USER=/RUN_AS_USER=ec2-user/g" /home/ec2-user/sonarqube-8.7.1.42226/bin/linux-x86-64/sonar.sh
              chown -R ec2-user:ec2-user /home/ec2-user/sonarqube-8.7.1.42226/
              /home/ec2-user/sonarqube-8.7.1.42226/bin/linux-x86-64/sonar.sh start &
              #sudo useradd zap && sudo usermod -a -G docker zap
              #### Installing Zap
              ## Starting docker service and creating user/group for owasp zap
              sudo service docker start && sudo useradd zap && sudo usermod -a -G docker zap
              ## Pulling owasp zap docker container from docker hub
              docker pull zaproxy/zap-bare
              docker run -u zap -p 8085:8085 -i zaproxy/zap-bare zap.sh -daemon -host 0.0.0.0 -port 8085 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.key=workshopzapkey &
              ## Checking cfn init 
              /opt/aws/bin/cfn-init -s ${AWS::StackId} -r WebServerInstance --configsets InstallAndRun --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
              ## Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
              # /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
              # All done so signal success
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80, 81
      VpcId: !Ref DefaultVPCId
      SecurityGroupEgress:
        - IpProtocol: tcp
          Description: allow all outbound traffic on port 80 from OWASP ZAP Instance
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: allow all outbound traffic on port 81 from the SonarQube Instance
          FromPort: 81
          ToPort: 81
          CidrIp: 0.0.0.0/0
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic on port 443 from Instance
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W2
            reason: "Egress on port 80 and 443 to install packages on the instance."
          - id: W5
            reason: "Egress on port 80 and 443 to install packages on the instance."
          - id: W9
            reason: "Ingress on port 80 from /0."

  SecurityGroupIngressPort80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all inbound traffic on port 80 for OWASP ZAP Instance
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      GroupId: !Ref WebServerSecurityGroup
      CidrIp: 0.0.0.0/0

  SecurityGroupIngressPort81:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all inbound traffic on port 81 for the SonarQube Instance
      IpProtocol: tcp
      FromPort: 81
      ToPort: 81
      GroupId: !Ref WebServerSecurityGroup
      CidrIp: 0.0.0.0/0
  WebServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: !Sub ${AWS::StackName}-EC2Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Resource provided with explicit role name for workshop and consistency."

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebServerInstanceRole
      InstanceProfileName: !Sub ${AWS::StackName}-EC2InstanceProfile

Outputs:
  SonarQubeURL:
    Description: URL for newly created SonarQube Instance
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
        - ':81'
    Export:
      Name: SonarQubeURL
  OWASPZapURL:
    Description: URL for newly created OWASP ZAP Instance
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
    Export:
      Name: OWASPZapURL